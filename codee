 SmartSDLC - AI-Powered Software Development Platform (Simplified)
# Google Colab Implementation with Streamlit

# ==================== INSTALLATION ====================
!pip install streamlit PyPDF2 pyngrok -q

# ==================== IMPORTS ====================
import streamlit as st
import PyPDF2
import io
from datetime import datetime

# ==================== CONFIGURATION ====================
st.set_page_config(
    page_title="SmartSDLC",
    page_icon="🚀",
    layout="wide"
)

# ==================== AI MOCK PROCESSOR ====================
class AIProcessor:
    def analyze_requirements(self, text):
        return {
            "functional": ["User auth", "CRUD operations", "API endpoints"],
            "non_functional": ["Performance", "Security", "Scalability"],
            "tech_stack": ["Python", "FastAPI", "React", "PostgreSQL"]
        }
    
    def generate_code(self, lang, framework):
        if lang == "Python" and framework == "FastAPI":
            return '''from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    email: str

@app.get("/")
def home():
    return {"message": "SmartSDLC API"}

@app.post("/users")
def create_user(user: User):
    return {"user": user, "status": "created"}'''
        
        elif lang == "JavaScript" and framework == "React":
            return '''import React, { useState } from 'react';

function App() {
    const [users, setUsers] = useState([]);
    
    return (
        <div>
            <h1>SmartSDLC App</h1>
            <form>
                <input placeholder="Name" />
                <input placeholder="Email" />
                <button>Add User</button>
            </form>
            <ul>
                {users.map(user => <li key={user.id}>{user.name}</li>)}
            </ul>
        </div>
    );
}

export default App;'''
        
        return f"# Generated {lang} code with {framework}"
    
    def generate_tests(self, code_type):
        return '''import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_home():
    response = client.get("/")
    assert response.status_code == 200

def test_create_user():
    user_data = {"name": "John", "email": "john@example.com"}
    response = client.post("/users", json=user_data)
    assert response.status_code == 200'''

# ==================== HELPER FUNCTIONS ====================
def extract_pdf_text(pdf_file):
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        return "".join([page.extract_text() for page in pdf_reader.pages])
    except:
        return "Error reading PDF"

# ==================== MAIN APP ====================
def main():
    # Initialize AI processor
    if 'ai' not in st.session_state:
        st.session_state.ai = AIProcessor()
    
    # Sidebar Navigation
    st.sidebar.title("🚀 SmartSDLC")
    page = st.sidebar.selectbox("Choose Feature", [
        "📊 Dashboard",
        "📄 Requirements",
        "💻 Code Gen",
        "🧪 Tests",
        "💬 Chat"
    ])
    
    # Main Content
    if page == "📊 Dashboard":
        st.title("SmartSDLC Dashboard")
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Projects", "5", "↗️ 2")
        col2.metric("Code Files", "23", "↗️ 7")
        col3.metric("Tests", "45", "↗️ 12")
        
        st.subheader("Recent Activity")
        st.write("✅ Generated FastAPI code")
        st.write("✅ Created test cases")
        st.write("🔄 Analyzing requirements...")
    
    elif page == "📄 Requirements":
        st.title("Requirement Analysis")
        
        tab1, tab2 = st.tabs(["📁 Upload PDF", "✍️ Text Input"])
        
        with tab1:
            uploaded_file = st.file_uploader("Upload PDF", type=['pdf'])
            if uploaded_file:
                text = extract_pdf_text(uploaded_file)
                st.text_area("Extracted Text", text[:500] + "...", height=100)
                
                if st.button("Analyze"):
                    analysis = st.session_state.ai.analyze_requirements(text)
                    st.session_state.analysis = analysis
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**Functional Requirements:**")
                        for req in analysis["functional"]:
                            st.write(f"• {req}")
                    
                    with col2:
                        st.write("**Tech Stack:**")
                        for tech in analysis["tech_stack"]:
                            st.badge(tech)
        
        with tab2:
            prompt = st.text_area("Describe your project:", height=100)
            if st.button("Analyze") and prompt:
                analysis = st.session_state.ai.analyze_requirements(prompt)
                st.session_state.analysis = analysis
                st.success("Analysis complete!")
    
    elif page == "💻 Code Gen":
        st.title("AI Code Generation")
        
        if 'analysis' not in st.session_state:
            st.warning("Please analyze requirements first!")
            return
        
        col1, col2 = st.columns(2)
        with col1:
            lang = st.selectbox("Language", ["Python", "JavaScript", "Java"])
        with col2:
            framework = st.selectbox("Framework", ["FastAPI", "React", "Spring"])
        
        if st.button("Generate Code"):
            code = st.session_state.ai.generate_code(lang, framework)
            st.code(code, language=lang.lower())
            st.download_button("Download", code, f"code.{lang.lower()}")
    
    elif page == "🧪 Tests":
        st.title("Test Generator")
        
        test_type = st.selectbox("Test Type", ["Unit Tests", "Integration Tests"])
        
        if st.button("Generate Tests"):
            tests = st.session_state.ai.generate_tests(test_type)
            st.code(tests, language="python")
            st.download_button("Download Tests", tests, "tests.py")
    
    elif page == "💬 Chat":
        st.title("AI Assistant")
        
        # Initialize chat
        if 'messages' not in st.session_state:
            st.session_state.messages = [
                {"role": "assistant", "content": "Hi! How can I help with your development?"}
            ]
        
        # Display messages
        for msg in st.session_state.messages:
            with st.chat_message(msg["role"]):
                st.write(msg["content"])
        
        # Chat input
        if prompt := st.chat_input("Ask me anything..."):
            st.session_state.messages.append({"role": "user", "content": prompt})
            
            # Simple responses
            responses = {
                "fastapi": "FastAPI is great for building APIs quickly!",
                "react": "React is perfect for interactive UIs!",
                "test": "Always write tests for better code quality!",
                "default": "I can help with Python, JavaScript, testing, and more!"
            }
            
            response = responses.get(
                next((k for k in responses.keys() if k in prompt.lower()), "default")
            )
            
            st.session_state.messages.append({"role": "assistant", "content": response})
            st.rerun()

# ==================== RUN APP ====================
if __name__ == "__main__":
    main()

# ==================== DEPLOYMENT SECTION ====================
# Run this in a separate cell to deploy with ngrok:

# !streamlit run /content/smartsdlc.py --server.port 8501 &
# !npm install -g localtunnel
# !lt --port 8501
